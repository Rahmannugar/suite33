generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS
enum Role {
  ADMIN
  STAFF
}

// MODELS

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  role      Role      @default(ADMIN)
  fullName  String?
  avatarUrl String?
  business  Business?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Staff     Staff?
}

model Business {
  id           String        @id @default(uuid())
  name         String
  industry     String?
  location     String?
  logoUrl      String?
  ownerId      String        @unique
  owner        User          @relation(fields: [ownerId], references: [id])
  departments  Department[]
  staff        Staff[]
  sales        Sale[]
  expenditures Expenditure[]
  payrolls     Payroll[]
  categories   Category[]
  inventory    Inventory[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Department {
  id         String          @id @default(uuid())
  name       String
  businessId String
  business   Business        @relation(fields: [businessId], references: [id])
  staff      Staff[]
  kpis       DepartmentKPI[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id           String      @id @default(uuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
  businessId   String
  business     Business    @relation(fields: [businessId], references: [id])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  kpis     StaffKPI[]
  payrolls Payroll[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffKPI {
  id      String   @id @default(uuid())
  staffId String
  staff   Staff    @relation(fields: [staffId], references: [id])
  metric  String
  value   Float
  period  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepartmentKPI {
  id           String     @id @default(uuid())
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  metric       String
  value        Float
  period       DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id          String   @id @default(uuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  amount      Float
  description String?
  date        DateTime @default(now())
}

model Expenditure {
  id          String   @id @default(uuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  amount      Float
  description String?
  date        DateTime @default(now())
}

model Payroll {
  id         String   @id @default(uuid())
  staffId    String
  staff      Staff    @relation(fields: [staffId], references: [id])
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  amount     Float
  period     DateTime

  createdAt DateTime @default(now())
}

model Category {
  id         String      @id @default(uuid())
  name       String
  businessId String
  business   Business    @relation(fields: [businessId], references: [id])
  inventory  Inventory[]

  createdAt DateTime @default(now())
}

model Inventory {
  id         String   @id @default(uuid())
  name       String
  quantity   Int      @default(0)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
